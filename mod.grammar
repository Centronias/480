S
	( S_PAR ) S_REC
		: 1 3
	string S_REC
		: 0 1
	int S_REC
		: 0 1
	real S_REC
		: 0 1
	bool S_REC
		: 0 1
	id S_REC
		: 0 1
S_PAR@
	( S_PAR ) S_REC
	string S_REC
	int S_REC
	real S_REC
	bool S_REC
	id S_REC
	:= id ASSIGNMENT
		:= i i -> ~		: 2 1 !
		:= r r -> ~		: 2 1 f!
		:= b b -> ~		: 2 1 !
		:= r i -> ~		: 2 s>f 1 f!
		:= i r -> ~		: 2 f>s 1 !
		:= s s -> ~		: 2 1 2!
	+ RESR RESR
		+ i i -> i		: 1 2 +
		+ r r -> r		: 1 2 f+
		+ i r -> i		: 1 s>f 2 f+
		+ r i -> r		: 1 2 s>f f+
		+ s s -> s		: 1 2 s+
	- RESR RESR_MIN
		- i i -> i		: 1 2 -
		- r r -> r		: 1 2 f-
		- i r -> i		: 1 s>f 2 f-
		- r i -> r		: 1 2 s>f f-
		- i ~ -> i		: 1 negate
		- r ~ -> r		: 1 fnegate
	* RESR RESR
		* i i -> i		: 1 2 *
		* r r -> r		: 1 2 f*
		* i r -> i		: 1 s>f 2 f*
		* r i -> r		: 1 2 s>f f*
	/ RESR RESR
		/ i i -> i		: 1 2 /
		/ r r -> r		: 1 2 f/
		/ i r -> i		: 1 s>f 2 f/
		/ r i -> r		: 1 2 s>f f/
	% RESR RESR
		% i i -> i		: 1 2 /mod drop
	^ RESR RESR
		^ i i -> i		: 1 s>f 2 s>f f** f>s
		^ r r -> r		: 1 2 f**
		^ i r -> r		: 1 s>f 2 f**
		^ r i -> r		: 1 2 s>f f**
	= RESR RESR
		= i i -> b		: 1 2 =
		= r r -> b		: 1 2 f=
		= i r -> b		: 1 s>f 2 f=
		= r i -> b		: 1 2 s>f f=
		= b b -> b		: 1 2 0=
	> RESR RESR
		> i i -> b		: 1 2 >
		> r r -> b		: 1 2 f>
		> i r -> b		: 1 s>f 2 f>
		> r i -> b		: 1 2 s>f f>
	>= RESR RESR
		>= i i -> b		: 1 2 >=
		>= r r -> b		: 1 2 f>=
		>= i r -> b		: 1 s>f 2 f>=
		>= r i -> b		: 1 2 s>f f>=
	< RESR RESR
		< i i -> b		: 1 2 <
		< r r -> b		: 1 2 f<
		< i r -> b		: 1 s>f 2 f<
		< r i -> b		: 1 2 s>f f<
	<= RESR RESR
		<= i i -> b		: 1 2 <=
		<= r r -> b		: 1 2 f<=
		<= i r -> b		: 1 s>f 2 f<=
		<= r i -> b		: 1 2 s>f f<=
	!= RESR RESR
		<> i i -> b		: 1 2 <>
		<> r r -> b		: 1 2 f<>
		<> i r -> b		: 1 s>f 2 f<>
		<> r i -> b		: 1 2 s>f f<>
	or RESR RESR
		or b b -> b		: 1 2 or
	and RESR RESR
		or b b -> b		: 1 2 and
	not RESR
		not b -> b		: 1 invert
	sin RESR
		sin i -> r		: 1 s>f fsin
		sin r -> r		: 1 fsin
	cos RESR
		cos i -> r		: 1 s>f fcos
		cos r -> r		: 1 fcos
	tan RESR
		tan i -> r		: 1 s>f ftan
		tan r -> r		: 1 ftan
	if RESR EXPR ELSE
		if b @ @ -> ~	: 1 if 2 else 3 then
	while RESR EXPR EXPRLIST
		while b @ @ -> ~	: begin 1 while 2 3 repeat
	@ let ( ( id type ) VARLIST )
		let ( ( ~ ~ ) ~ ) -> ~	:
	# let ( ( id FUNLIST ) ( type FUNTYPE ) ) EXPR EXPRLIST
		let ( ( ~ ~ ) ( ~ ~ ) ) @ @ -> ~ :
	stdout RESR
		stdout i -> ~	: 1 .
		stdout r -> ~	: 1 f.
		stdout b -> ~	: 1 .
		stdout s -> ~	: 1 type
	~
		:
S_REC
	( S_PAR ) S_REC
	string S_REC
	int S_REC
	real S_REC
	bool S_REC
	id S_REC
	~
EXPR
	( EXPR_PAR )
		: 1
	string
		s : 0
	int
		i : 0
	real
		r : 0
	bool
		b : 0
	id
		i -> i	: 0
		r -> r	: 0
		b -> b	: 0
		s -> s	: 0
EXPR_PAR
	:= id ASSIGNMENT
	+ RESR RESR
	- RESR RESR_MIN
	* RESR RESR
	/ RESR RESR
	% RESR RESR
	^ RESR RESR
	= RESR RESR
	> RESR RESR
	>= RESR RESR
	< RESR RESR
	<= RESR RESR
	!= RESR RESR
	or RESR RESR
	and RESR RESR
	not RESR
	sin RESR
	cos RESR
	tan RESR
	if RESR EXPR ELSE
	while RESR EXPR EXPRLIST
	let ( ( id type ) VARLIST )
	let ( ( id FUNLIST ) ( type FUNTYPE ) ) EXPR EXPRLIST
	stdout RESR
RESR
	( OPER )
		( s ) -> s	: 1
		( i ) -> i	: 1
		( b ) -> b	: 1
		( r ) -> r	: 1
	string
	int
	real
	bool
	id
OPER
	:= id ASSIGNMENT
	+ RESR RESR
	- RESR RESR_MIN
	* RESR RESR
	/ RESR RESR
	% RESR RESR
	^ RESR RESR
	= RESR RESR
	> RESR RESR
	>= RESR RESR
	< RESR RESR
	<= RESR RESR
	!= RESR RESR
	or RESR RESR
	and RESR RESR
	not RESR
	sin RESR
	cos RESR
	tan RESR
RESR_MIN
	( OPER )
	string
	int
	real
	bool
	id
	~
EXPRLIST
	( EXPR_PAR ) EXPRLIST
		: 1 3
	string EXPRLIST
		: 1
	int EXPRLIST
		: 1
	real EXPRLIST
		: 1
	bool EXPRLIST
		: 1
	id EXPRLIST
		: 1
	~
VARLIST
	@ ( id type ) VARLIST
		( ~ i ) ~ -> ~ :
		( ~ b ) ~ -> ~ :
		( ~ r ) ~ -> ~ :
		( ~ s ) ~ -> ~ :
	~
ELSE
	( EXPR_PAR )
	string
	int
	real
	bool
	id
	~
FUNLIST
	id FUNLIST
		:
	~
FUNTYPE
	type FUNTYPE
		:
	~
PARAMLIST
	( OPER ) PARAMLIST
		: 1 3
	string PARAMLIST
		: 0 1
	int PARAMLIST
		: 0 1
	real PARAMLIST
		: 0 1
	bool PARAMLIST
		: 0 1
	id PARAMLIST
		: 0 1
	~
ASSIGNMENT
	( ASSIGNMENT_PAREN )
		( s ) -> s	: 1
		( i ) -> i	: 1
		( b ) -> b	: 1
		( r ) -> r	: 1
	string
	int
	real
	bool
	id
ASSIGNMENT_PAREN
	+ RESR RESR
	- RESR RESR_MIN
	* RESR RESR
	/ RESR RESR
	% RESR RESR
	^ RESR RESR
	= RESR RESR
	> RESR RESR
	>= RESR RESR
	< RESR RESR
	<= RESR RESR
	!= RESR RESR
	or RESR RESR
	and RESR RESR
	not RESR
	sin RESR
	cos RESR
	tan RESR
	! id PARAMLIST
		~ ~ -> ~	: 1 0